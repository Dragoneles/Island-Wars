//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Aeternia Unbound
// 
//==================================================================================================
include "TriggerLibs/NativeLib"

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_nPlayers = 12;
const int gv_nPlayersperTeam = 6;
const int gv_nHeroes = 2;
const int gv_nAbilities = 5;
const int gv_nPanelColumns = 3;
const int gv_panelGap = 18;
const int gv_panelInlay = 25;
const int gv_iconHeight = 120;
const int gv_iconWidth = 120;
const int gv_iconInlay = 12;
const int gv_labelWidth = 120;
const string gv_buttonImage = "Assets\\Textures\\ui_research_frame_available_line_protoss.dds";
const string gv_buttonHighlightImage = "Assets\\Textures\\ui_techpurchase_tabbutton_normaloverpressedover.dds";
const fixed gv_buttonOpacity = 50.0;
const color gv_lifeLabelColor = Color(100.00, 0.00, 0.00);
const color gv_manaLabelColor = Color(0,66*100/255,100);
const color gv_buttonColor = Color(20*100/255,134*100/255,107*100/255);
const int gv_heroSelectionPanelxOffset = 25;
const int gv_heroSelectionPanelyOffset = 25;

//--------------------------------------------------------------------------------------------------
// Global Structures
//--------------------------------------------------------------------------------------------------
struct gs_Teams {
    text lv_teamName;
    int lv_teamID;
    color lv_teamColor;
    playergroup lv_playerGroup;
    int[7] lv_kills;
    int[7] lv_assists;
    int[7] lv_deaths;
    int[7] lv_towersDestroyed;
    int[7] lv_creepsSlain;
    int[7] lv_goldGained;
};

struct gs_HeroLibrary {
    string lv_unitType;
    text lv_description;
    int[7] lv_role;
    string lv_icon;
    string lv_name;
};

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
gs_Teams[3] gv_teams;
int gv_cTeam;
unit[gv_nPlayers + 1] gv_hero;
int[3] gv_heroSelectionDialog;
int gv_cPanel;
int gv_heroSelectionPanel;
int gv_dialogWidth;
int gv_dialogHeight;
string gv_dialogBackground;
int gv_nPanelRows;
int gv_panelWidth;
int gv_panelHeight;
int gv_labelHeight;
string gv_heroSelectionPanelBackground;
int gv_heroSelectionPanelWidth;
int gv_heroSelectionPanelHeight;
gs_HeroLibrary[gv_nHeroes + 1] gv_heroLibrary;
int gv_cHero;

void InitGlobals () {
    int init_i;
    int init_i1;

    init_i = 0;
    while (init_i <= 2) {
        gv_teams[init_i].lv_teamName = null;
        gv_teams[init_i].lv_teamID = 0;
        gv_teams[init_i].lv_teamColor = Color(0,0,0);
        gv_teams[init_i].lv_playerGroup = PlayerGroupEmpty();
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_kills[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_assists[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_deaths[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_towersDestroyed[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_creepsSlain[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_teams[init_i].lv_goldGained[init_i1] = 0;
            init_i1 = init_i1 + 1;
        }
        init_i = init_i + 1;
    }
    gv_cTeam = 0;
    init_i = 0;
    while (init_i <= gv_nPlayers) {
        gv_hero[init_i] = null;
        init_i = init_i + 1;
    }
    init_i = 0;
    while (init_i <= 2) {
        gv_heroSelectionDialog[init_i] = c_invalidDialogId;
        init_i = init_i + 1;
    }
    gv_cPanel = 0;
    gv_heroSelectionPanel = c_invalidDialogControlId;
    gv_dialogWidth = (gv_heroSelectionPanelWidth);
    gv_dialogHeight = (gv_heroSelectionPanelHeight);
    gv_dialogBackground = "Assets\\Textures\\ui_battle_metalframe_inner.dds";
    gv_nPanelRows = CeilingI((IntToFixed(gv_nHeroes) / IntToFixed(gv_nPanelColumns)));
    gv_panelWidth = ((gv_iconInlay * 3) + gv_iconWidth + gv_labelWidth);
    gv_panelHeight = (gv_iconHeight + (gv_iconInlay * 2));
    gv_labelHeight = (gv_iconHeight / 2);
    gv_heroSelectionPanelBackground = "Assets\\Textures\\ui_frame_keybinding_bindbuttonframe.dds";
    gv_heroSelectionPanelWidth = ((gv_panelInlay * 2) + (gv_nPanelColumns * gv_panelWidth) + (gv_panelGap * (gv_nPanelColumns - 1)));
    gv_heroSelectionPanelHeight = ((gv_panelInlay * 2) + (gv_nPanelRows * gv_panelHeight) + (gv_panelGap * (gv_nPanelRows - 1)));
    init_i = 0;
    while (init_i <= gv_nHeroes) {
        gv_heroLibrary[init_i].lv_unitType = null;
        gv_heroLibrary[init_i].lv_description = null;
        init_i1 = 0;
        while (init_i1 <= 6) {
            gv_heroLibrary[init_i].lv_role[init_i1] = 7;
            init_i1 = init_i1 + 1;
        }
        gv_heroLibrary[init_i].lv_icon = null;
        gv_heroLibrary[init_i].lv_name = "";
        init_i = init_i + 1;
    }
    gv_cHero = 0;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_CreateandShowHeroSelection ();
void gf_MapStartApplyArmor (unit lp_unit);
void gf_MapStartApplyMR (unit lp_unit);
void gf_AddTeam (text lp_teamName, int lp_teamID, color lp_teamColor);
void gf_InitializeTeams ();
void gf_CreateHeroSelectionDialog (int lp_team);
void gf_CreateFrame (int lp_panel, playergroup lp_playerGroup, int lp_cHero);
void gf_AddHero (string lp_unitType, string lp_name, text lp_description, string lp_icon, int lp_role1, int lp_role2, int lp_role3, int lp_role4, int lp_role5, int lp_role6);
void gf_SetHeroes ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_Init;
trigger gt_ArmorDiminish;
trigger gt_ApplyArmorArmorChange;
trigger gt_ApplyArmorUnitBirth;
trigger gt_ApplyArmorBuildingCreated;
trigger gt_ApplyArmorTrainingComplete;
trigger gt_ApplySpellResistArmorChange;
trigger gt_ApplySpellResistUnitBirth;
trigger gt_ApplySpellResistBuildingCreated;
trigger gt_ApplySpellResistTrainingComplete;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_CreateandShowHeroSelection () {
    // Implementation
    IntLoopBegin(1, 2);
    while (!IntLoopDone()) {
        gf_CreateHeroSelectionDialog(IntLoopCurrent());
        DialogSetVisible(gv_heroSelectionDialog[IntLoopCurrent()], gv_teams[IntLoopCurrent()].lv_playerGroup, true);
        IntLoopStep();
    }
    IntLoopEnd();
}

void gf_MapStartApplyArmor (unit lp_unit) {
    // Variable Declarations
    fixed lv_percentage;

    // Variable Initialization
    lv_percentage = 0.0;

    // Implementation
    lv_percentage = ((UnitGetPropertyFixed(lp_unit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lp_unit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorRemove(lp_unit, "Armor", 100);
    UnitBehaviorAdd(lp_unit, "Armor", lp_unit, FixedToInt((lv_percentage * 100.0)));
}

void gf_MapStartApplyMR (unit lp_unit) {
    // Variable Declarations
    fixed lv_percentage;

    // Variable Initialization
    lv_percentage = 0.0;

    // Implementation
    lv_percentage = ((UnitGetPropertyFixed(lp_unit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lp_unit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorRemove(lp_unit, "SpellResistance", 100);
    UnitBehaviorAdd(lp_unit, "SpellResistance", lp_unit, FixedToInt((lv_percentage * 100.0)));
}

void gf_AddTeam (text lp_teamName, int lp_teamID, color lp_teamColor) {
    // Implementation
    gv_cTeam += 1;
    gv_teams[gv_cTeam].lv_teamName = lp_teamName;
    gv_teams[gv_cTeam].lv_teamID = lp_teamID;
    gv_teams[gv_cTeam].lv_teamColor = lp_teamColor;
}

void gf_InitializeTeams () {
    // Implementation
}

void gf_CreateHeroSelectionDialog (int lp_team) {
    int auto423A6C20_ae;
    int auto423A6C20_ai;

    // Variable Declarations
    playergroup lv_team;
    int lv_x;

    // Variable Initialization
    lv_team = PlayerGroupEmpty();
    lv_x = 0;

    // Implementation
    lv_team = gv_teams[lp_team].lv_playerGroup;
    DialogCreate(gv_dialogWidth, gv_dialogHeight, c_anchorCenter, 0, 0, true);
    gv_heroSelectionDialog[lp_team] = DialogLastCreated();
    DialogSetImage(DialogLastCreated(), gv_dialogBackground);
    DialogControlCreate(DialogLastCreated(), c_triggerControlTypePanel);
    gv_heroSelectionPanel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), lv_team, gv_heroSelectionPanelWidth, gv_heroSelectionPanelHeight);
    DialogControlSetPosition(DialogControlLastCreated(), lv_team, c_anchorTopLeft, gv_heroSelectionPanelxOffset, gv_heroSelectionPanelyOffset);
    libNtve_gf_SetDialogItemImageType(DialogControlLastCreated(), c_triggerImageTypeBorder, lv_team);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_heroSelectionPanelBackground, lv_team);
    auto423A6C20_ae = gv_cHero;
    auto423A6C20_ai = 1;
    lv_x = 1;
    while ((auto423A6C20_ai >= 0 && lv_x <= auto423A6C20_ae) || (auto423A6C20_ai <= 0 && lv_x >= auto423A6C20_ae)) {
        gf_CreateFrame(gv_heroSelectionPanel, lv_team, lv_x);
        if (lv_x == auto423A6C20_ae) {
            break;
        }
        lv_x = lv_x + auto423A6C20_ai;
    }
}

void gf_CreateFrame (int lp_panel, playergroup lp_playerGroup, int lp_cHero) {
    // Variable Declarations
    int lv_xOffset;
    int lv_yOffset;
    int lv_column;
    int lv_row;
    int lv_panel;

    // Variable Initialization
    lv_xOffset = 0;
    lv_yOffset = 0;
    lv_column = 0;
    lv_row = 0;
    lv_panel = c_invalidDialogControlId;

    // Implementation
    gv_cPanel += 1;
    lv_row = CeilingI((gv_cPanel / gv_nPanelColumns));
    lv_column = CeilingI((gv_cPanel / gv_nPanelRows));
    lv_xOffset = (gv_panelInlay + (gv_panelWidth * (lv_column - 1)) + (gv_panelGap + (lv_column - 1)));
    lv_yOffset = (gv_panelInlay + (gv_panelHeight * (lv_row - 1)) + (gv_panelGap + (lv_row - 1)));
    DialogControlCreateInPanel(lp_panel, c_triggerControlTypePanel);
    lv_panel = DialogControlLastCreated();
    DialogControlSetSize(DialogControlLastCreated(), lp_playerGroup, gv_panelWidth, gv_panelHeight);
    DialogControlSetPosition(DialogControlLastCreated(), lp_playerGroup, c_anchorTopLeft, lv_xOffset, lv_yOffset);
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeImage);
    DialogControlSetSize(DialogControlLastCreated(), lp_playerGroup, gv_iconWidth, gv_iconHeight);
    DialogControlSetPosition(DialogControlLastCreated(), lp_playerGroup, c_anchorTopLeft, gv_iconInlay, gv_iconInlay);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_heroLibrary[lp_cHero].lv_icon, lp_playerGroup);
    libNtve_gf_SetDialogItemImageType2(DialogControlLastCreated(), false, lp_playerGroup);
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lp_playerGroup, gv_labelWidth, gv_labelHeight);
    DialogControlSetPosition(DialogControlLastCreated(), lp_playerGroup, c_anchorTopLeft, (gv_iconWidth + (gv_iconInlay * 2)), ((gv_labelHeight * 0) + gv_iconInlay));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/1BE82936") + FixedToText(UnitTypeGetProperty(gv_heroLibrary[lp_cHero].lv_unitType, c_unitPropLifeMax), 0)), lp_playerGroup);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Tooltip", lp_playerGroup);
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeLabel);
    DialogControlSetSize(DialogControlLastCreated(), lp_playerGroup, gv_labelWidth, gv_labelHeight);
    DialogControlSetPosition(DialogControlLastCreated(), lp_playerGroup, c_anchorTopLeft, (gv_iconWidth + (gv_iconInlay * 2)), ((gv_labelHeight * 1) + gv_iconInlay));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), (StringExternal("Param/Value/FBFE7C6E") + FixedToText(UnitTypeGetProperty(gv_heroLibrary[lp_cHero].lv_unitType, c_unitPropEnergyMax), 0)), lp_playerGroup);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Tooltip", lp_playerGroup);
    DialogControlCreateInPanel(lv_panel, c_triggerControlTypeButton);
    DialogControlSetFullDialog(DialogControlLastCreated(), lp_playerGroup, true);
    libNtve_gf_SetDialogItemImage2(DialogControlLastCreated(), gv_buttonHighlightImage, lp_playerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), gv_buttonImage, lp_playerGroup);
    libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), gv_buttonColor, lp_playerGroup);
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringToText(gv_heroLibrary[lp_cHero].lv_name), lp_playerGroup);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Tooltip", lp_playerGroup);
}

void gf_AddHero (string lp_unitType, string lp_name, text lp_description, string lp_icon, int lp_role1, int lp_role2, int lp_role3, int lp_role4, int lp_role5, int lp_role6) {
    // Implementation
    gv_cHero += 1;
    gv_heroLibrary[gv_cHero].lv_unitType = lp_unitType;
    gv_heroLibrary[gv_cHero].lv_description = lp_description;
    gv_heroLibrary[gv_cHero].lv_icon = lp_icon;
    gv_heroLibrary[gv_cHero].lv_name = lp_name;
    gv_heroLibrary[gv_cHero].lv_role[1] = lp_role1;
    gv_heroLibrary[gv_cHero].lv_role[2] = lp_role2;
    gv_heroLibrary[gv_cHero].lv_role[3] = lp_role3;
    gv_heroLibrary[gv_cHero].lv_role[4] = lp_role4;
    gv_heroLibrary[gv_cHero].lv_role[5] = lp_role5;
    gv_heroLibrary[gv_cHero].lv_role[6] = lp_role6;
}

void gf_SetHeroes () {
    // Implementation
    gf_AddHero("ZoltenTitanofBlades", "Zolten", null, "Assets\\Textures\\btn-unit-protoss-zeratul.dds", 1, 5, 7, 7, 7, 7);
    gf_AddHero("FeritusTitanofSavagery", "Feritus", null, "Assets\\Textures\\btn-research-zerg-predator.dds", 1, 0, 7, 7, 7, 7);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init
//--------------------------------------------------------------------------------------------------
bool gt_Init_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    gf_SetHeroes();
    Wait(2.0, c_timeGame);
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    while (!UnitGroupLoopDone()) {
        gf_MapStartApplyArmor(UnitGroupLoopCurrent());
        gf_MapStartApplyMR(UnitGroupLoopCurrent());
        UnitGroupLoopStep();
    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, 6);
    while (!IntLoopDone()) {
        PlayerGroupAdd(gv_teams[1].lv_playerGroup, IntLoopCurrent());
        IntLoopStep();
    }
    IntLoopEnd();
    IntLoopBegin(7, 12);
    while (!IntLoopDone()) {
        PlayerGroupAdd(gv_teams[2].lv_playerGroup, IntLoopCurrent());
        IntLoopStep();
    }
    IntLoopEnd();
    gf_CreateandShowHeroSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_Init_Init () {
    gt_Init = TriggerCreate("gt_Init_Func");
    TriggerAddEventMapInit(gt_Init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Armor Diminish
//--------------------------------------------------------------------------------------------------
bool gt_ArmorDiminish_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupActive());
    while (!PlayerGroupLoopDone()) {
        if ((EventUnit() == gv_hero[PlayerGroupLoopCurrent()])) {
            libNtve_gf_SetUpgradeLevelForPlayer(EventPlayer(), "DiminishArmor", UnitLevel(gv_hero[EventPlayer()]));
        }
        else {
        }
        PlayerGroupLoopStep();
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ArmorDiminish_Init () {
    gt_ArmorDiminish = TriggerCreate("gt_ArmorDiminish_Func");
    TriggerAddEventUnitGainLevel(gt_ArmorDiminish, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Armor (Armor Change)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyArmorArmorChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorRemove(lv_triggeringUnit, "Armor", 100);
    UnitBehaviorAdd(lv_triggeringUnit, "Armor", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyArmorArmorChange_Init () {
    gt_ApplyArmorArmorChange = TriggerCreate("gt_ApplyArmorArmorChange_Func");
    TriggerAddEventUnitProperty(gt_ApplyArmorArmorChange, null, c_unitPropLifeArmor);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Armor (Unit Birth)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyArmorUnitBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "Armor", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyArmorUnitBirth_Init () {
    gt_ApplyArmorUnitBirth = TriggerCreate("gt_ApplyArmorUnitBirth_Func");
    TriggerAddEventUnitCreated(gt_ApplyArmorUnitBirth, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Armor (Building Created)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyArmorBuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "Armor", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyArmorBuildingCreated_Init () {
    gt_ApplyArmorBuildingCreated = TriggerCreate("gt_ApplyArmorBuildingCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_ApplyArmorBuildingCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Armor (Training Complete)
//--------------------------------------------------------------------------------------------------
bool gt_ApplyArmorTrainingComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropLifeArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "Armor", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplyArmorTrainingComplete_Init () {
    gt_ApplyArmorTrainingComplete = TriggerCreate("gt_ApplyArmorTrainingComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_ApplyArmorTrainingComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Spell Resist (Armor Change)
//--------------------------------------------------------------------------------------------------
bool gt_ApplySpellResistArmorChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorRemove(lv_triggeringUnit, "SpellResistance", 100);
    UnitBehaviorAdd(lv_triggeringUnit, "SpellResistance", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplySpellResistArmorChange_Init () {
    gt_ApplySpellResistArmorChange = TriggerCreate("gt_ApplySpellResistArmorChange_Func");
    TriggerAddEventUnitProperty(gt_ApplySpellResistArmorChange, null, c_unitPropShieldArmor);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Spell Resist (Unit Birth)
//--------------------------------------------------------------------------------------------------
bool gt_ApplySpellResistUnitBirth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "SpellResistance", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplySpellResistUnitBirth_Init () {
    gt_ApplySpellResistUnitBirth = TriggerCreate("gt_ApplySpellResistUnitBirth_Func");
    TriggerAddEventUnitCreated(gt_ApplySpellResistUnitBirth, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Spell Resist (Building Created)
//--------------------------------------------------------------------------------------------------
bool gt_ApplySpellResistBuildingCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "SpellResistance", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplySpellResistBuildingCreated_Init () {
    gt_ApplySpellResistBuildingCreated = TriggerCreate("gt_ApplySpellResistBuildingCreated_Func");
    TriggerAddEventUnitConstructProgress(gt_ApplySpellResistBuildingCreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Apply Spell Resist (Training Complete)
//--------------------------------------------------------------------------------------------------
bool gt_ApplySpellResistTrainingComplete_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_percentage;
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_percentage = 0.0;
    lv_triggeringUnit = EventUnitProgressUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_percentage = ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) / ((UnitGetPropertyFixed(lv_triggeringUnit, c_unitPropShieldArmor, c_unitPropCurrent) * 0.06) + 1.0));
    UnitBehaviorAdd(lv_triggeringUnit, "SpellResistance", lv_triggeringUnit, FixedToInt((lv_percentage * 100.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_ApplySpellResistTrainingComplete_Init () {
    gt_ApplySpellResistTrainingComplete = TriggerCreate("gt_ApplySpellResistTrainingComplete_Func");
    TriggerAddEventUnitTrainProgress(gt_ApplySpellResistTrainingComplete, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_Init_Init();
    gt_ArmorDiminish_Init();
    gt_ApplyArmorArmorChange_Init();
    gt_ApplyArmorUnitBirth_Init();
    gt_ApplyArmorBuildingCreated_Init();
    gt_ApplyArmorTrainingComplete_Init();
    gt_ApplySpellResistArmorChange_Init();
    gt_ApplySpellResistUnitBirth_Init();
    gt_ApplySpellResistBuildingCreated_Init();
    gt_ApplySpellResistTrainingComplete_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
